// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vMMv_arma
arma::vec vMMv_arma(arma::vec& x, arma::mat& A, arma::mat& B, arma::vec& y);
RcppExport SEXP _spacelink_vMMv_arma(SEXP xSEXP, SEXP ASEXP, SEXP BSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vMMv_arma(x, A, B, y));
    return rcpp_result_gen;
END_RCPP
}
// vMv_arma
arma::vec vMv_arma(arma::vec& x, arma::mat& A, arma::vec& y);
RcppExport SEXP _spacelink_vMv_arma(SEXP xSEXP, SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vMv_arma(x, A, y));
    return rcpp_result_gen;
END_RCPP
}
// invM_arma
arma::mat invM_arma(const arma::mat& mat);
RcppExport SEXP _spacelink_invM_arma(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(invM_arma(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spacelink_vMMv_arma", (DL_FUNC) &_spacelink_vMMv_arma, 4},
    {"_spacelink_vMv_arma", (DL_FUNC) &_spacelink_vMv_arma, 3},
    {"_spacelink_invM_arma", (DL_FUNC) &_spacelink_invM_arma, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_spacelink(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
